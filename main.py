import sqlite3
from datetime import date
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from config import tg_token, uprav_id, all_date,\
                   all_date_up, current_date
from parse_xlsx import get_request_to_sheet

bot = Bot(tg_token)
dp = Dispatcher(bot)

telegram_date = [all_date[current_date]]

all_task = ReplyKeyboardMarkup(resize_keyboard=True).add(KeyboardButton('/menu'), KeyboardButton('/help'))

back_button = ReplyKeyboardMarkup(resize_keyboard=True).add(KeyboardButton('/–Ω–∞–∑–∞–¥'))

menu_buttons = ReplyKeyboardMarkup(resize_keyboard=True).add(KeyboardButton('/–æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å'), KeyboardButton('/–∞–¥–º–∏–Ω—ã'),
                                                             KeyboardButton('/pslogs'))

otchet_button = ReplyKeyboardMarkup(resize_keyboard=True).add(KeyboardButton('/—Ä–∞—Å—Ö–æ–¥—ã'), KeyboardButton('/–≤—ã—Ä—É—á–∫–∞'),
                                                              KeyboardButton('/–Ω–∞–∑–∞–¥'))


@dp.message_handler(commands=['start'])
async def questions(message: types.Message):
    if message.from_user.id in uprav_id and message.chat.type == 'private':
        await bot.send_message(message.from_user.id, 'üëÄ –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞–∂–º–∏—Ç–µ: menu\n'
                                                     'ü§∑‚Äç‚ôÇÔ∏è –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∫–æ–º–∞–Ω–¥–∞–º–∞: help\n'
                                                     'üë• –ø—Ä–æ–µ–∫—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Å—Ç–∞–¥–∏–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –≤ —Å–ª—É—á–∞–µ –ø—Ä–æ–±–ª–µ–º'
                                                     ' –ø–∏—Å–∞—Ç—å @ilpdakz',
                               reply_markup=all_task)
    else:
        await bot.send_message(message.from_user.id, '‚õî –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω —Ç–æ–ª—å–∫–æ —É–ø—Ä–∞–≤–ª—è—é—â–µ–º—É')
        print(message.from_user.id)


@dp.message_handler(commands=['menu', '–º–µ–Ω—é', '–Ω–∞–∑–∞–¥'])
async def questions(message: types.Message):
    if message.from_user.id in uprav_id and message.chat.type == 'private':
        sum_expenses_to_menu = 0
        data = get_request_to_sheet(telegram_date[len(telegram_date) - 1])['values']
        for i in range(1, len(data)):
            sum_expenses_to_menu += int(data[i][0])
        await bot.send_message(message.from_user.id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Colizeum manager\n'
                                                     f'üìÖ –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –ø—Ä–æ–≤–µ—Ä–∫–∏ - '
                                                     f'{telegram_date[len(telegram_date) - 1]} \n'
                                                     f'üìù –°—É–º–º–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ {telegram_date[len(telegram_date) - 1]}:'
                                                     f' {sum_expenses_to_menu} \n'
                                                     f'üìä –í—ã—Ä—É—á–∫–∞ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç  \n'
                                                     'üë• –Ω–∞ —Å–º–µ–Ω–µ: \n'
                                                     '----------–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–æ—Ç–∞------------\n',
                               reply_markup=menu_buttons)
        photo = open('images/projectstruct.png', 'rb')
        await bot.send_photo(message.from_user.id, photo)

    else:
        await bot.send_message(message.from_user.id, '‚õî –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω —Ç–æ–ª—å–∫–æ —É–ø—Ä–∞–≤–ª—è—é—â–µ–º—É')
        print(message.from_user.id)


@dp.message_handler(commands='help')
async def questions(message: types.Message):
    if message.from_user.id in uprav_id and message.chat.type == 'private':
        await bot.send_message(message.from_user.id, f'–¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –ø—Ä–æ–≤–µ—Ä–∫–∏ - {telegram_date[len(telegram_date) - 1]}\n'
                                                     f'–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø–æ–º–µ–Ω—è—Ç—å –º–µ—Å—è—Ü –Ω–∞–ø–∏—à–∏—Ç–µ:\n'
                                                     f'/cmo –º–µ—Å—è—Ü\n', reply_markup=back_button)
    else:
        await bot.send_message(message.from_user.id, '‚õî –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω —Ç–æ–ª—å–∫–æ —É–ø—Ä–∞–≤–ª—è—é—â–µ–º—É')
        print(message.from_user.id)


@dp.message_handler(commands=['cmo', '—Å–º–æ'])
async def questions(message: types.Message):
    if message.from_user.id in uprav_id and message.chat.type == 'private':
        if message.text.lower().split()[1] in list(all_date_up.keys()):
            telegram_date.append(message.text.lower().split()[1])
            await bot.send_message(message.from_user.id, '–ú–µ—Å—è—Ü –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª—Å—è –Ω–∞ '
                                                         f'{message.text.lower().split()[1]}')
        else:
            await bot.send_message(message.from_user.id, '‚õî –û—à–∏–±–∫–∞ –≤ –Ω–∞–ø–∏—Å–∞–Ω–∏–∏ –º–µ—Å—è—Ü–∞\n'
                                                         f'–ü—Ä–∏–º–µ—Ä: /cmo –ú–∞—Ä—Ç {message.text.lower().split()[1]}')
    else:
        await bot.send_message(message.from_user.id, '‚õî –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω —Ç–æ–ª—å–∫–æ —É–ø—Ä–∞–≤–ª—è—é—â–µ–º—É')
        print(message.from_user.id)


@dp.message_handler(commands=['–æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å'])
async def questions(message: types.Message):
    if message.from_user.id in uprav_id and message.chat.type == 'private':
        await bot.send_message(message.from_user.id, 'üìä–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏:\n'
                                                     f' –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –ø—Ä–æ–≤–µ—Ä–∫–∏ - {telegram_date[len(telegram_date) - 1]}\n'
                                                     'üßæ–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å—Ö–æ–¥—ã –∏'
                                                     ' –≤—ã—Ä—É—á–∫—É –∫–ª—É–±–∞, —Ç–∞–∫–∂–µ –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å'
                                                     ' –¥–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å —Ä–∞—Å—Ö–æ–¥', reply_markup=otchet_button)
    else:
        await bot.send_message(message.from_user.id, '‚õî –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω —Ç–æ–ª—å–∫–æ —É–ø—Ä–∞–≤–ª—è—é—â–µ–º—É')
        print(message.from_user.id)


@dp.message_handler(commands='–†–∞—Å—Ö–æ–¥—ã')
async def questions(message: types.Message):
    if message.from_user.id in uprav_id and message.chat.type == 'private':
        await bot.send_message(message.from_user.id, '–∂–¥–∏—Ç–µ...')
        try:
            data = get_request_to_sheet(telegram_date[len(telegram_date) - 1])['values']
            bot_response = f'-------------------------------------------\n' \
                           f'–†–∞—Å—Ö–æ–¥—ã –∑–∞ {telegram_date[len(telegram_date) - 1]}\n' \
                           f'-------------------------------------------\n'
            bot_response += '–°—É–º–º–∞ —Ä–∞—Å—Ö–æ–¥–∞ | –ü—Ä–∏—á–∏–Ω–∞ —Ä–∞—Å—Ö–æ–¥–∞ - –¥–∞—Ç–∞  \n'
            sum_expenses = 0
            for i in range(1, len(data)):
                if not data[i]:
                    continue
                else:
                    prints_money = ' ' * (25 - len(data[i][0]))
                    if data[i][1] == '':
                        what_is_it = '–ü—Ä–∏—á–∏–Ω—ã –Ω–µ—Ç'
                    else:
                        what_is_it = data[i][1]
                    try:
                        sum_expenses += int(data[i][0])
                    except ValueError:
                        sum_expenses += 0
                    bot_response += '-------------------------------------------\n'
                    bot_response += f'{data[i][0]}{prints_money}| {what_is_it} - {data[i][2][0:5]}\n'
            bot_response += '-------------------–ò—Ç–æ–≥-------------------\n'
            bot_response += f'–°—É–º–º–∞ –≤—Å–µ—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ —Ä–∞–≤–Ω–∞ = {sum_expenses}'
            await bot.send_message(message.from_user.id, bot_response, reply_markup=back_button)
            sum_expenses = 0
        except:
            await bot.send_message(message.from_user.id, '‚õî –†–∞—Å—Ö–æ–¥–æ–≤ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–µ—Å—è—Ü –Ω–µ—Ç')
    else:
        await bot.send_message(message.from_user.id, '‚õî –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω —Ç–æ–ª—å–∫–æ —É–ø—Ä–∞–≤–ª—è—é—â–µ–º—É')
        print(message.from_user.id)


if __name__ == '__main__':
    executor.start_polling(dp)